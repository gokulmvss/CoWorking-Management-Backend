package com.example.demo.CoWorkingSpace.spaceowner;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.CoWorkingSpace.CoworkingSpace;

import jakarta.transaction.Transactional;

@Service
public class CoworkingSpaceServiceImpl implements CoworkingSpaceService {

    private final CoWorkingSpaceRepository coworkingSpaceRepository;

    @Autowired
    public CoworkingSpaceServiceImpl(CoWorkingSpaceRepository coworkingSpaceRepository) {
        this.coworkingSpaceRepository = coworkingSpaceRepository;
    }

    @Override
    @Transactional
    public CoworkingSpaceDTO createCoworkingSpace(CreateCoWorkingSpaceRequest request) {
        // Check if a coworking space with the same name already exists
        
    	CoworkingSpace coworkingSpace = new CoworkingSpace();
        coworkingSpace.setName(request.getName());
        coworkingSpace.setAddress(request.getAddress());
        coworkingSpace.setContactEmail(request.getContactEmail());
        coworkingSpace.setContactPhone(request.getContactPhone());
        coworkingSpace.setDescription(request.getDescription());
        coworkingSpace.setActive(true);
        
        CoworkingSpace savedSpace = coworkingSpaceRepository.save(coworkingSpace);
        return mapToDTO(savedSpace);
    }

    @Override
//    @Transactional(readOnly = true)
    public List<CoworkingSpaceDTO> getAllCoworkingSpaces() {
        return coworkingSpaceRepository.findByActiveTrue()
                .stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional(readOnly = true)
    public CoworkingSpaceDTO getCoworkingSpaceById(Long id)  {
        Optional<CoworkingSpace> coworkingSpace = coworkingSpaceRepository.findByIdAndActiveTrue(id);
//                .orElseThrow(() -> new ResourceNotFoundException("Coworking space not found with ID: " + id));
        
        return mapToDTO(coworkingSpace.get());
    }

    @Override
    @Transactional(readOnly = true)
    public CoworkingSpaceDTO getCoworkingSpaceWithWorkspaces(Long id)  {
        CoworkingSpace coworkingSpace = coworkingSpaceRepository.findByIdWithWorkspaces(id)
                .orElseThrow(() -> new ResourceNotFoundException("Coworking space not found with ID: " + id));
        
        if (!coworkingSpace.getActive()) {
            throw new ResourceNotFoundException("Coworking space not found with ID: " + id);
        }
        
        CoworkingSpaceDTO dto = mapToDTO(coworkingSpace);
        
        // Map workspaces
        List<WorkspaceDTO> workspaceDTOs = coworkingSpace.getWorkspaces().stream()
                .map(workspace -> WorkspaceDTO.builder()
                        .id(workspace.getId())
                        .name(workspace.getName())
                        .type(workspace.getType())
                        .capacity(workspace.getCapacity())
                        .location(workspace.getLocation())
                        .pricePerHour(workspace.getPricePerHour())
                        .available(workspace.getAvailable())
                        .coworkingSpaceName(coworkingSpace.getName())
                        .coworkingSpaceId(coworkingSpace.getId())
                        .build())
                .collect(Collectors.toList());
        
        dto.setWorkspaces(workspaceDTOs);
        
        return dto;
    }

    @Override
    @Transactional
    public CoworkingSpaceDTO updateCoworkingSpace(Long id, CreateCoworkingSpaceRequest request) throws ResourceNotFoundException {
        CoworkingSpace coworkingSpace = getCoworkingSpaceEntityById(id);
        
        coworkingSpace.setName(request.getName());
        coworkingSpace.setAddress(request.getAddress());
        coworkingSpace.setContactEmail(request.getContactEmail());
        coworkingSpace.setContactPhone(request.getContactPhone());
        coworkingSpace.setDescription(request.getDescription());
        
        CoworkingSpace updatedSpace = coworkingSpaceRepository.save(coworkingSpace);
        
        return mapToDTO(updatedSpace);
    }

    @Override
    @Transactional
    public void deactivateCoworkingSpace(Long id) throws ResourceNotFoundException {
        CoworkingSpace coworkingSpace = getCoworkingSpaceEntityById(id);
        coworkingSpace.setActive(false);
        coworkingSpaceRepository.save(coworkingSpace);
    }

    @Override
    @Transactional(readOnly = true)
    public CoworkingSpace getCoworkingSpaceEntityById(Long id) throws ResourceNotFoundException {
        return coworkingSpaceRepository.findByIdAndActiveTrue(id)
                .orElseThrow(() -> new ResourceNotFoundException("Coworking space not found with ID: " + id));
    }
    
    private CoworkingSpaceDTO mapToDTO(CoworkingSpace coworkingSpace) {
        return CoworkingSpaceDTO.builder()
                .id(coworkingSpace.getId())
                .name(coworkingSpace.getName())
                .address(coworkingSpace.getAddress())
                .contactEmail(coworkingSpace.getContactEmail())
                .contactPhone(coworkingSpace.getContactPhone())
                .description(coworkingSpace.getDescription())
                .active(coworkingSpace.getActive())
                .workspaces(Collections.emptyList()) // Default empty, will be filled when needed
                .build();
    }

	@Override
	public CoworkingSpaceDTO createCoworkingSpace(CreateCoWorkingSpaceRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public CoworkingSpaceDTO updateCoworkingSpace(Long id, CreateCoWorkingSpaceRequest request) {
		// TODO Auto-generated method stub
		return null;
	}
}